#!/usr/bin/env ruby
require 'benchmark'
# inputs: 
# 'short' or 'long' benchmark
# path to directory containing SMURF data files (iff long benchmark)

usage = "#{$0} <-s|-l smurf_data_path>"
mode = nil
case ARGV[0]
when "-s" then mode = :short
when "-l" then mode = :long
else abort usage
end

# long benchmark runs many more iterations, a varying number of iterations,
# and reports the slope and intercept
# long benchmark also runs smurf for comparison
if mode == :long
  datPath = ARGV[1]
  if not (datPath && File.directory?(datPath))
    abort usage
  elsif not File.exist?(File.join(datPath, "betaDataExposed.dat"))
    abort "data file not found in #{datPath}"
  end
end

short_query = "short.fasta"
long_query = "long.fasta"

query_dir = "queries"
smurf = "smurf"
mrfy = "mrfy"
hmmGlob = "*.hmm+"

if mode == :short
  query = short_query
  template_dir = "short_templates"
  num_passes = 1
else
  query = long_query
  template_dir = "long_templates"
  num_passes = 5
end

query = File.join(query_dir, query)

# benchmark all templates.
# each template is aligned with the query file.
times = []

Dir.glob(File.join(template_dir, hmmGlob)).each do |hmm|
  h = File.basename(hmm)
  q = File.basename(query)
  puts "#{h}"
  local_times = []
  cmd = [mrfy, "-viterbi", hmm, query, ">/dev/null"].join(" ")
  num_passes.times do
    local_times << Benchmark.measure {system(cmd)}.real
  end
  times << local_times.min
end

# statistics on times
total = times.inject{|acc, t| acc += t}
puts "Total time elapsed: #{total}"